class Solution:
    def numTrees(self, n: int) -> int:
        if n == 1:
            return 1
        dp = [0] * (n + 1)
        dp[0], dp[1] = 1, 1

        for i in range(2, n + 1):
            for j in range(0, i):
                # i = 2, j = 0
                dp[i] += dp[j] * dp[i - j - 1]
        return dp[-1]
        
        
        # 1 as an input,
        #   I can ONLY create a node with a value of 1

        # 2 as an input, that means I have to create 2 nodes, and they an only have 1, or 2 as values


        # numTrees(0) = 1 
        # numTrees(1) = 1 
        # numTrees(2) = 2
        # numTrees(3) = 5
        # numTrees(4) = 
        #               numTrees(0) * numTrees(3) {case with 1 as root} = 1 * 5
        #               numTrees(1) * numTrees(2) {case with 2 as root} = 1 * 2
        #               numTrees(2) * numTrees(1) {case with 3 as root} = 2 * 1
        #               numTrees(3) * numTrees(0) {case with 4 as root} = 5 * 1
        # numTrees(4) = 5 + 2 + 2 + 5 = 14
        # numTrees(5) = 

        # Generalized for n
        # numTree(n) = numTrees(0) * numTrees(n - 1) + numTrees(2) * numTrees(n - 2) + ... + numTrees(n -1) * numTrees(0)


        # for any input n, I range from 1, 2, ..., (n- 1), n, and I pick each of those as a root, to build unique
        # BST's from.

        # for n = 5:
        # {num_nodes_left, num_nodes_right} = {0, 4}, {1, 3}, {2, 2}, {3, 1}, {4, 0}

        # for n = 2:
        # {num_nodes_left, num_nodes_right} = {0, 1} {1, 0}
        # In terms of numTrees(2) = numTrees(0) * numTrees(1) + numTrees(1) * numTrees(0)
